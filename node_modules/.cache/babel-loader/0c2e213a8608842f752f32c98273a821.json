{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/lucas/Documents/pokemoncards/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react'; //css\n\nimport './App.css'; //components\n\nimport Searchbar from './Components/Searchbar/Searchbar';\nimport CardTable from './Components/CardTable/CardTable';\n\nfunction App() {\n  _s();\n\n  const [pokemon, setPokemon] = useState([]);\n  const [pokemonSpecies, setPokemonSpecies] = useState([]);\n  const [pokemonId, setPokemonId] = useState([]);\n  const [pokemonToShow, setPokemonToShow] = useState([]); //'water', 'bug', 'dark', 'fighting', 'ghost', 'steel', 'flying', 'electric', 'fairy'];\n  //const habitat = ['grassland', 'forest', 'waters edge', 'sea', 'cave', 'mountain', 'rough-terrain', 'urban', 'rare'];\n  //const color = ['red', 'blue', 'yellow', 'green', 'black', 'brown', 'purple', 'gray', 'white', 'pink'];\n\n  const [filters, setFilters] = useState([]);\n  const [type, setType] = useState([{\n    name: 'poison',\n    active: false\n  }, {\n    name: 'psychic',\n    active: false\n  }, {\n    name: 'grass',\n    active: false\n  }, {\n    name: 'ground',\n    active: false\n  }, {\n    name: 'ice',\n    active: false\n  }, {\n    name: 'fire',\n    active: false\n  }, {\n    name: 'rock',\n    active: false\n  }, {\n    name: 'dragon',\n    active: false\n  }, {\n    name: 'water',\n    active: false\n  }, {\n    name: 'bug',\n    active: false\n  }, {\n    name: 'dark',\n    active: false\n  }, {\n    name: 'fighting',\n    active: false\n  }, {\n    name: 'ghost',\n    active: false\n  }, {\n    name: 'steel',\n    active: false\n  }, {\n    name: 'flying',\n    active: false\n  }, {\n    name: 'electric',\n    active: false\n  }, {\n    name: 'fairy',\n    active: false\n  }]);\n  const [habitat, setHabitat] = useState([{\n    name: 'grassland',\n    active: false\n  }]);\n  const [color, setColor] = useState([{\n    name: 'blue',\n    active: false\n  }]);\n\n  const toggleType = btn => {\n    const copy = [...type];\n    const found = copy.findIndex(element => element.name === btn.id);\n    copy[found].active = !copy[found].active;\n    setType(copy);\n  };\n\n  const toggleHabitat = btn => {\n    const copy = [...habitat];\n    const found = copy.findIndex(element => element.name === btn.id);\n    copy[found].active = !copy[found].active;\n    setHabitat(copy);\n  };\n\n  const toggleColor = btn => {\n    const copy = [...color];\n    const found = copy.findIndex(element => element.name === btn.id);\n    copy[found].active = !copy[found].active;\n    setColor(copy);\n  };\n\n  useEffect(() => {\n    const filterType = type.filter(element => element.active === true);\n    const filterHabitat = habitat.filter(element => element.active === true);\n    const filter = type.filter(element => element.active === true);\n    filter.forEach(element => filters.push(element.name));\n  }); //async function that fetches all pokemon\n\n  useEffect(() => {\n    for (let i = 1; i < 15; i++) {\n      fetch(`https://pokeapi.co/api/v2/pokemon/${i}/`).then(response => response.json()).then(jsonResponse => setPokemon(prev => [...prev, jsonResponse])).catch(error => console.log(error));\n    }\n  }, []); //async function that fetches all pokemon species\n\n  useEffect(() => {\n    for (let i = 1; i < 15; i++) {\n      fetch(`https://pokeapi.co/api/v2/pokemon-species/${i}/`).then(response => response.json()).then(jsonResponse => setPokemonSpecies(prev => [...prev, jsonResponse])).catch(error => console.log(error));\n    }\n  }, []); //checK If pokemon should be shown\n\n  useEffect(() => {\n    let arrayOfPokemonToShow = [];\n\n    for (let i = 0; i < pokemonId.length; i++) {\n      for (let j = 0; j < pokemon.length; j++) {\n        if (pokemonId[i] === pokemon[j].id) {\n          arrayOfPokemonToShow.push(pokemon[j]);\n        }\n      }\n    }\n\n    setPokemonToShow(arrayOfPokemonToShow);\n  }, [pokemonId]); //filters types\n\n  useEffect(() => {\n    //these are the words that we use as filters\n    let filters = []; //the pokemon that we filtered (containers duplicates)\n\n    let filteredPokemon = [...pokemonId];\n    const filter = type.filter(element => element.active === true);\n    filter.forEach(element => filters.push(element.name));\n    pokemon.forEach(element => element.types.forEach(type => {\n      for (let i = 0; i < filters.length; i++) {\n        if (type.type.name === filters[i]) {\n          filteredPokemon.push(element.id);\n        }\n      }\n    })); //filtered pokemon without duplicates\n\n    let unique = [...new Set(filteredPokemon)];\n    setPokemonId(unique);\n  }, [type]); //filters habitat\n\n  useEffect(() => {\n    //these are the words that we use as filters\n    let filters = [];\n    console.log(filters); //the pokemon that we filtered (containers duplicates)\n\n    let filteredPokemon = [...pokemonId];\n    const filter = habitat.filter(element => element.active === true);\n    filter.forEach(element => filters.push(element.name));\n\n    for (let i = 0; i < filters.length; i++) {\n      for (let j = 0; j < pokemonSpecies.length; j++) {\n        if (filters[i] === pokemonSpecies[j].habitat.name) {\n          console.log(pokemonSpecies[j]);\n          filteredPokemon.push(pokemonSpecies[j].id);\n        }\n      }\n    } //filtered pokemon without duplicates\n\n\n    let unique = [...new Set(filteredPokemon)];\n    setPokemonId(unique);\n  }, [habitat]); //filter by color\n\n  useEffect(() => {\n    //these are the words that we use as filters\n    let filters = []; //the pokemon that we filtered (containers duplicates)\n\n    let filteredPokemon = [...pokemonId];\n    const filter = color.filter(element => element.active === true);\n    filter.forEach(element => filters.push(element.name));\n\n    for (let i = 0; i < filters.length; i++) {\n      for (let j = 0; j < pokemonSpecies.length; j++) {\n        if (filters[i] === pokemonSpecies[j].color.name) {\n          console.log(pokemonSpecies[j]);\n          filteredPokemon.push(pokemonSpecies[j].id);\n        }\n      }\n    } //filtered pokemon without duplicates\n\n\n    let unique = [...new Set(filteredPokemon)];\n    setPokemonId(unique);\n  }, [color]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Searchbar, {\n      toggleType: toggleType,\n      toggleHabitat: toggleHabitat,\n      toggleColor: toggleColor,\n      type: type,\n      color: color,\n      habitat: habitat\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardTable, {\n      pokemonToShow: pokemonToShow\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"rei/pElMN//NIb8Rqchw+VS2fWs=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/lucas/Documents/pokemoncards/src/App.js"],"names":["React","useEffect","useState","Searchbar","CardTable","App","pokemon","setPokemon","pokemonSpecies","setPokemonSpecies","pokemonId","setPokemonId","pokemonToShow","setPokemonToShow","filters","setFilters","type","setType","name","active","habitat","setHabitat","color","setColor","toggleType","btn","copy","found","findIndex","element","id","toggleHabitat","toggleColor","filterType","filter","filterHabitat","forEach","push","i","fetch","then","response","json","jsonResponse","prev","catch","error","console","log","arrayOfPokemonToShow","length","j","filteredPokemon","types","unique","Set"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\n//css\nimport './App.css'\n//components\nimport Searchbar from './Components/Searchbar/Searchbar';\nimport CardTable from './Components/CardTable/CardTable';\n\nfunction App() {\n\n  const [pokemon, setPokemon] = useState([]);\n  const [pokemonSpecies, setPokemonSpecies] = useState([]);\n  const [pokemonId, setPokemonId] = useState([]);\n\n  const [pokemonToShow, setPokemonToShow] = useState([]);\n\n    //'water', 'bug', 'dark', 'fighting', 'ghost', 'steel', 'flying', 'electric', 'fairy'];\n    //const habitat = ['grassland', 'forest', 'waters edge', 'sea', 'cave', 'mountain', 'rough-terrain', 'urban', 'rare'];\n    //const color = ['red', 'blue', 'yellow', 'green', 'black', 'brown', 'purple', 'gray', 'white', 'pink'];\n  const [filters, setFilters] = useState([]);\n  const [type, setType] = useState([{name: 'poison', active: false}, {name: 'psychic', active: false}, {name: 'grass', active: false}, {name: 'ground', active: false}, {name: 'ice', active: false}, {name: 'fire', active: false}, {name: 'rock', active: false}, {name: 'dragon', active: false}, {name: 'water', active: false}, {name: 'bug', active: false}, {name: 'dark', active: false}, {name: 'fighting', active: false}, {name: 'ghost', active: false}, {name: 'steel', active: false}, {name: 'flying', active: false}, {name: 'electric', active: false}, {name: 'fairy', active: false}])\n  const [habitat, setHabitat] = useState([{name: 'grassland', active: false},])\n  const [color, setColor] = useState([{name: 'blue', active: false},])\n\n\n  const toggleType = (btn) => {\n    const copy = [...type];\n    const found = copy.findIndex(element => element.name === btn.id);\n    copy[found].active = !copy[found].active;\n    setType(copy);\n  };\n\n  const toggleHabitat = (btn) => {\n    const copy = [...habitat];\n    const found = copy.findIndex(element => element.name === btn.id);\n    copy[found].active = !copy[found].active;\n    setHabitat(copy);\n  };\n\n  const toggleColor = (btn) => {\n    const copy = [...color];\n    const found = copy.findIndex(element => element.name === btn.id);\n    copy[found].active = !copy[found].active;\n    setColor(copy);\n  };\n\n  useEffect(() => {\n    const filterType = type.filter(element => element.active === true);\n    const filterHabitat = habitat.filter(element => element.active === true);\n    const filter = type.filter(element => element.active === true);\n\n    filter.forEach(element => filters.push(element.name));\n  })\n\n  //async function that fetches all pokemon\n  useEffect(() => {\n    for(let i = 1; i < 15; i++) {\n      fetch(`https://pokeapi.co/api/v2/pokemon/${i}/`\n      ).then((response) => response.json()\n      ).then((jsonResponse) => setPokemon((prev) => [...prev, jsonResponse])\n      ).catch((error) => console.log(error));\n    }\n  }, []);\n\n\n  //async function that fetches all pokemon species\n  useEffect(() => {\n    for(let i = 1; i < 15; i++) {\n      fetch(`https://pokeapi.co/api/v2/pokemon-species/${i}/`\n      ).then((response) => response.json()\n      ).then((jsonResponse) => setPokemonSpecies((prev) => [...prev, jsonResponse])\n      ).catch((error) => console.log(error));\n    }\n  }, []);\n\n\n  //checK If pokemon should be shown\n  useEffect(() => {\n    let arrayOfPokemonToShow = [];\n    \n    for(let i = 0; i < pokemonId.length; i++) {\n      for(let j = 0; j < pokemon.length; j++) {\n        if(pokemonId[i] === pokemon[j].id) {\n          arrayOfPokemonToShow.push(pokemon[j]);\n        }\n      }\n    }\n    setPokemonToShow(arrayOfPokemonToShow);\n  }, [pokemonId]);\n\n\n\n\n  //filters types\n  useEffect(() => {\n    //these are the words that we use as filters\n    let filters = [];\n    //the pokemon that we filtered (containers duplicates)\n    let filteredPokemon = [...pokemonId];\n    const filter = type.filter(element => element.active === true);\n    filter.forEach(element => filters.push(element.name));\n      pokemon.forEach(element => element.types.forEach(type => {\n        for(let i = 0; i < filters.length; i++) {\n          if(type.type.name === filters[i]) {\n            filteredPokemon.push(element.id);\n          }\n        }\n      }));\n      //filtered pokemon without duplicates\n      let unique = [...new Set(filteredPokemon)];\n      setPokemonId(unique);  \n    }, [type])\n\n\n\n\n    //filters habitat\n    useEffect(() => {\n      //these are the words that we use as filters\n      let filters = [];\n      console.log(filters);\n      //the pokemon that we filtered (containers duplicates)\n      let filteredPokemon = [...pokemonId];\n      const filter = habitat.filter(element => element.active === true);\n      filter.forEach(element => filters.push(element.name));\n\n        for(let i = 0; i < filters.length; i++) {\n          for(let j = 0; j < pokemonSpecies.length; j++) {\n            if(filters[i] === pokemonSpecies[j].habitat.name) {\n              console.log(pokemonSpecies[j]);\n              filteredPokemon.push(pokemonSpecies[j].id)\n            }\n          }\n        }\n        //filtered pokemon without duplicates\n        let unique = [...new Set(filteredPokemon)];\n        setPokemonId(unique);  \n    }, [habitat])\n\n\n    //filter by color\n    useEffect(() => {\n      //these are the words that we use as filters\n      let filters = [];\n      //the pokemon that we filtered (containers duplicates)\n      let filteredPokemon = [...pokemonId];\n      const filter = color.filter(element => element.active === true);\n      filter.forEach(element => filters.push(element.name));\n\n        for(let i = 0; i < filters.length; i++) {\n          for(let j = 0; j < pokemonSpecies.length; j++) {\n            if(filters[i] === pokemonSpecies[j].color.name) {\n              console.log(pokemonSpecies[j]);\n              filteredPokemon.push(pokemonSpecies[j].id)\n            }\n          }\n        }\n  \n        //filtered pokemon without duplicates\n        let unique = [...new Set(filteredPokemon)];\n        setPokemonId(unique);\n  \n    }, [color])\n\n\n\n\n  return (\n    <div  className=\"App\">\n      <Searchbar toggleType={toggleType} toggleHabitat={toggleHabitat} toggleColor={toggleColor} type={type} color={color} habitat={habitat}/>\n      <CardTable pokemonToShow={pokemonToShow}/>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}