{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/lucas/Documents/pokemoncards/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react'; //css\n\nimport './App.css'; //components\n\nimport Searchbar from './Components/Searchbar/Searchbar';\nimport CardTable from './Components/CardTable/CardTable';\n\nfunction App() {\n  _s();\n\n  const [pokemon, setPokemon] = useState([]);\n  const [pokemonToShow, setPokemonToShow] = useState([]); //const type = ['normal', 'poison', 'psychic', 'grass', 'ground', 'ice', 'fire', 'rock', 'dragon', 'water', 'bug', 'dark', 'fighting', 'ghost', 'steel', 'flying', 'electric', 'fairy'];\n  //const habitat = ['grassland', 'forest', 'waters edge', 'sea', 'cave', 'mountain', 'rough-terrain', 'urban', 'rare'];\n  //const color = ['red', 'blue', 'yellow', 'green', 'black', 'brown', 'purple', 'gray', 'white', 'pink'];\n\n  const [type, setType] = useState([{\n    name: 'grass',\n    active: false\n  }, {\n    name: 'poison',\n    active: false\n  }, {\n    name: 'psychic',\n    active: false\n  }]);\n\n  const toggleType = btn => {\n    const copy = [...type];\n    const found = copy.findIndex(element => element.name === btn.id);\n    copy[found].active = !copy[found].active;\n    setType(copy);\n  }; //async function that fetches all pokemon\n\n\n  useEffect(() => {\n    for (let i = 1; i < 152; i++) {\n      fetch(`https://pokeapi.co/api/v2/pokemon/${i}/`).then(response => response.json()).then(jsonResponse => setPokemon(prev => [...prev, jsonResponse])).catch(error => console.log(error));\n    }\n  }, []);\n  useEffect(() => {\n    //these are the words that we use as filters\n    let filters = []; //the pokemon that we filtered (containers duplicates)\n\n    let filteredPokemon = [];\n    const filter = type.filter(element => element.active === true);\n    filter.forEach(element => filters.push(element.name));\n    pokemon.forEach(element => element.types.forEach(type => {\n      for (let i = 0; i < filters.length; i++) {\n        if (type.type.name === filters[i]) {\n          filteredPokemon.push(element);\n        }\n      }\n    })); //filtered pokemon without duplicates\n\n    let unique = [...new Set(filteredPokemon)];\n    setPokemonToShow(unique);\n  }, [type]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Searchbar, {\n      toggleType: toggleType,\n      type: type\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardTable, {\n      info: pokemonToShow\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"OdB9KIlyeKCstuRHW7P43umHGXA=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/lucas/Documents/pokemoncards/src/App.js"],"names":["React","useEffect","useState","Searchbar","CardTable","App","pokemon","setPokemon","pokemonToShow","setPokemonToShow","type","setType","name","active","toggleType","btn","copy","found","findIndex","element","id","i","fetch","then","response","json","jsonResponse","prev","catch","error","console","log","filters","filteredPokemon","filter","forEach","push","types","length","unique","Set"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\n//css\nimport './App.css'\n//components\nimport Searchbar from './Components/Searchbar/Searchbar';\nimport CardTable from './Components/CardTable/CardTable';\n\nfunction App() {\n\n  const [pokemon, setPokemon] = useState([]);\n  const [pokemonToShow, setPokemonToShow] = useState([]);\n    //const type = ['normal', 'poison', 'psychic', 'grass', 'ground', 'ice', 'fire', 'rock', 'dragon', 'water', 'bug', 'dark', 'fighting', 'ghost', 'steel', 'flying', 'electric', 'fairy'];\n    //const habitat = ['grassland', 'forest', 'waters edge', 'sea', 'cave', 'mountain', 'rough-terrain', 'urban', 'rare'];\n    //const color = ['red', 'blue', 'yellow', 'green', 'black', 'brown', 'purple', 'gray', 'white', 'pink'];\n  \n  const [type, setType] = useState([{name: 'grass', active: false}, {name: 'poison', active: false}, {name: 'psychic', active: false}])\n  \n  const toggleType = (btn) => {\n    const copy = [...type];\n    const found = copy.findIndex(element => element.name === btn.id);\n    copy[found].active = !copy[found].active;\n    setType(copy);\n  };\n\n  //async function that fetches all pokemon\n  useEffect(() => {\n    for(let i = 1; i < 152; i++) {\n      fetch(`https://pokeapi.co/api/v2/pokemon/${i}/`\n      ).then((response) => response.json()\n      ).then((jsonResponse) => setPokemon((prev) => [...prev, jsonResponse])\n      ).catch((error) => console.log(error));\n    }\n  }, []);\n\n  useEffect(() => {\n\n    //these are the words that we use as filters\n    let filters = [];\n\n    //the pokemon that we filtered (containers duplicates)\n    let filteredPokemon = [];\n\n    const filter = type.filter(element => element.active === true);\n    filter.forEach(element => filters.push(element.name));\n      pokemon.forEach(element => element.types.forEach(type => {\n        for(let i = 0; i < filters.length; i++) {\n          if(type.type.name === filters[i]) {\n            filteredPokemon.push(element);\n          }\n        }\n      }));\n\n      //filtered pokemon without duplicates\n      let unique = [...new Set(filteredPokemon)];\n      setPokemonToShow(unique);\n\n  }, [type])\n\n  return (\n    <div  className=\"App\">\n      <Searchbar toggleType={toggleType} type={type}/>\n      <CardTable info={pokemonToShow}/>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}