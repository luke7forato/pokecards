{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/lucas/Documents/pokemoncards/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react'; //css\n\nimport './App.css'; //components\n\nimport Searchbar from './Components/Searchbar/Searchbar';\nimport CardTable from './Components/CardTable/CardTable';\n\nfunction App() {\n  _s();\n\n  const [pokemon, setPokemon] = useState([]);\n  const [pokemonSpecies, setPokemonSpecies] = useState([]);\n  const [pokemonId, setPokemonId] = useState([]);\n  const [pokemonToShow, setPokemonToShow] = useState([]); //'water', 'bug', 'dark', 'fighting', 'ghost', 'steel', 'flying', 'electric', 'fairy'];\n  //const habitat = ['grassland', 'forest', 'waters edge', 'sea', 'cave', 'mountain', 'rough-terrain', 'urban', 'rare'];\n  //const color = ['red', 'blue', 'yellow', 'green', 'black', 'brown', 'purple', 'gray', 'white', 'pink'];\n\n  const [type, setType] = useState([{\n    name: 'poison',\n    active: false\n  }, {\n    name: 'psychic',\n    active: false\n  }, {\n    name: 'grass',\n    active: false\n  }, {\n    name: 'ground',\n    active: false\n  }, {\n    name: 'ice',\n    active: false\n  }, {\n    name: 'fire',\n    active: false\n  }, {\n    name: 'rock',\n    active: false\n  }, {\n    name: 'dragon',\n    active: false\n  }, {\n    name: 'water',\n    active: false\n  }, {\n    name: 'bug',\n    active: false\n  }, {\n    name: 'dark',\n    active: false\n  }, {\n    name: 'fighting',\n    active: false\n  }, {\n    name: 'ghost',\n    active: false\n  }, {\n    name: 'steel',\n    active: false\n  }, {\n    name: 'flying',\n    active: false\n  }, {\n    name: 'electric',\n    active: false\n  }, {\n    name: 'fairy',\n    active: false\n  }]);\n  const [habitat, setHabitat] = useState([{\n    name: 'poison',\n    active: false\n  }]);\n\n  const toggleType = btn => {\n    const copy = [...type];\n    const found = copy.findIndex(element => element.name === btn.id);\n    copy[found].active = !copy[found].active;\n    setType(copy);\n  }; //async function that fetches all pokemon\n\n\n  useEffect(() => {\n    for (let i = 1; i < 5; i++) {\n      fetch(`https://pokeapi.co/api/v2/pokemon/${i}/`).then(response => response.json()).then(jsonResponse => setPokemon(prev => [...prev, jsonResponse])).catch(error => console.log(error));\n    }\n  }, []); //async function that fetches all pokemon species\n\n  useEffect(() => {\n    for (let i = 1; i < 5; i++) {\n      fetch(`https://pokeapi.co/api/v2/pokemon-species/${i}/`).then(response => response.json()).then(jsonResponse => setPokemonSpecies(prev => [...prev, jsonResponse])).catch(error => console.log(error));\n    }\n  }, []); //checK If pokemon should be shown\n\n  useEffect(() => {\n    let arrayOfPokemonToShow = [];\n\n    for (let i = 0; i < pokemonId.length; i++) {\n      for (let j = 0; j < pokemon.length; j++) {\n        if (pokemonId[i] === pokemon[j].id) {\n          arrayOfPokemonToShow.push(pokemon[j]);\n        }\n      }\n    }\n\n    setPokemonToShow(arrayOfPokemonToShow);\n  }, [pokemonId]); //filters types\n\n  useEffect(() => {\n    //these are the words that we use as filters\n    let filters = []; //the pokemon that we filtered (containers duplicates)\n\n    let filteredPokemon = [];\n    const filter = type.filter(element => element.active === true);\n    filter.forEach(element => filters.push(element.name));\n    pokemon.forEach(element => element.types.forEach(type => {\n      for (let i = 0; i < filters.length; i++) {\n        if (type.type.name === filters[i]) {\n          filteredPokemon.push(element.id);\n        }\n      }\n    })); //filtered pokemon without duplicates\n\n    let unique = [...new Set(filteredPokemon)];\n    setPokemonId(unique);\n  }, [type]); //filters types\n\n  useEffect(() => {\n    //these are the words that we use as filters\n    let filters = []; //the pokemon that we filtered (containers duplicates)\n\n    let filteredPokemon = [];\n    const filter = type.filter(element => element.active === true);\n    filter.forEach(element => filters.push(element.name));\n    pokemon.forEach(element => element.types.forEach(type => {\n      for (let i = 0; i < filters.length; i++) {\n        if (type.type.name === filters[i]) {\n          filteredPokemon.push(element.id);\n        }\n      }\n    })); //filtered pokemon without duplicates\n\n    let unique = [...new Set(filteredPokemon)];\n    setPokemonId(unique);\n  }, [habitat]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Searchbar, {\n      toggleType: toggleType,\n      type: type\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardTable, {\n      pokemonToShow: pokemonToShow\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"Cgfkhd+33CbNOZshSomkZwfWmP4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/lucas/Documents/pokemoncards/src/App.js"],"names":["React","useEffect","useState","Searchbar","CardTable","App","pokemon","setPokemon","pokemonSpecies","setPokemonSpecies","pokemonId","setPokemonId","pokemonToShow","setPokemonToShow","type","setType","name","active","habitat","setHabitat","toggleType","btn","copy","found","findIndex","element","id","i","fetch","then","response","json","jsonResponse","prev","catch","error","console","log","arrayOfPokemonToShow","length","j","push","filters","filteredPokemon","filter","forEach","types","unique","Set"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\n//css\nimport './App.css'\n//components\nimport Searchbar from './Components/Searchbar/Searchbar';\nimport CardTable from './Components/CardTable/CardTable';\n\nfunction App() {\n\n  const [pokemon, setPokemon] = useState([]);\n  const [pokemonSpecies, setPokemonSpecies] = useState([]);\n  const [pokemonId, setPokemonId] = useState([]);\n\n  const [pokemonToShow, setPokemonToShow] = useState([]);\n\n    //'water', 'bug', 'dark', 'fighting', 'ghost', 'steel', 'flying', 'electric', 'fairy'];\n    //const habitat = ['grassland', 'forest', 'waters edge', 'sea', 'cave', 'mountain', 'rough-terrain', 'urban', 'rare'];\n    //const color = ['red', 'blue', 'yellow', 'green', 'black', 'brown', 'purple', 'gray', 'white', 'pink'];\n  \n  const [type, setType] = useState([{name: 'poison', active: false}, {name: 'psychic', active: false}, {name: 'grass', active: false}, {name: 'ground', active: false}, {name: 'ice', active: false}, {name: 'fire', active: false}, {name: 'rock', active: false}, {name: 'dragon', active: false}, {name: 'water', active: false}, {name: 'bug', active: false}, {name: 'dark', active: false}, {name: 'fighting', active: false}, {name: 'ghost', active: false}, {name: 'steel', active: false}, {name: 'flying', active: false}, {name: 'electric', active: false}, {name: 'fairy', active: false}])\n  const [habitat, setHabitat] = useState([{name: 'poison', active: false},])\n\n\n  const toggleType = (btn) => {\n    const copy = [...type];\n    const found = copy.findIndex(element => element.name === btn.id);\n    copy[found].active = !copy[found].active;\n    setType(copy);\n  };\n\n  //async function that fetches all pokemon\n  useEffect(() => {\n    for(let i = 1; i < 5; i++) {\n      fetch(`https://pokeapi.co/api/v2/pokemon/${i}/`\n      ).then((response) => response.json()\n      ).then((jsonResponse) => setPokemon((prev) => [...prev, jsonResponse])\n      ).catch((error) => console.log(error));\n    }\n  }, []);\n\n\n  //async function that fetches all pokemon species\n  useEffect(() => {\n    for(let i = 1; i < 5; i++) {\n      fetch(`https://pokeapi.co/api/v2/pokemon-species/${i}/`\n      ).then((response) => response.json()\n      ).then((jsonResponse) => setPokemonSpecies((prev) => [...prev, jsonResponse])\n      ).catch((error) => console.log(error));\n    }\n  }, []);\n\n\n  //checK If pokemon should be shown\n  useEffect(() => {\n    let arrayOfPokemonToShow = [];\n    \n    for(let i = 0; i < pokemonId.length; i++) {\n      for(let j = 0; j < pokemon.length; j++) {\n        if(pokemonId[i] === pokemon[j].id) {\n          arrayOfPokemonToShow.push(pokemon[j]);\n        }\n      }\n    }\n    setPokemonToShow(arrayOfPokemonToShow);\n  }, [pokemonId]);\n\n\n\n\n  //filters types\n  useEffect(() => {\n    //these are the words that we use as filters\n    let filters = [];\n    //the pokemon that we filtered (containers duplicates)\n    let filteredPokemon = [];\n    const filter = type.filter(element => element.active === true);\n    filter.forEach(element => filters.push(element.name));\n      pokemon.forEach(element => element.types.forEach(type => {\n        for(let i = 0; i < filters.length; i++) {\n          if(type.type.name === filters[i]) {\n            filteredPokemon.push(element.id);\n          }\n        }\n      }));\n      //filtered pokemon without duplicates\n      let unique = [...new Set(filteredPokemon)];\n      setPokemonId(unique);\n  }, [type])\n\n\n\n\n    //filters types\n    useEffect(() => {\n      //these are the words that we use as filters\n      let filters = [];\n      //the pokemon that we filtered (containers duplicates)\n      let filteredPokemon = [];\n      const filter = type.filter(element => element.active === true);\n      filter.forEach(element => filters.push(element.name));\n        pokemon.forEach(element => element.types.forEach(type => {\n          for(let i = 0; i < filters.length; i++) {\n            if(type.type.name === filters[i]) {\n              filteredPokemon.push(element.id);\n            }\n          }\n        }));\n  \n        //filtered pokemon without duplicates\n        let unique = [...new Set(filteredPokemon)];\n        setPokemonId(unique);\n  \n    }, [habitat])\n\n\n\n\n  return (\n    <div  className=\"App\">\n      <Searchbar toggleType={toggleType} type={type}/>\n      <CardTable pokemonToShow={pokemonToShow}/>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}