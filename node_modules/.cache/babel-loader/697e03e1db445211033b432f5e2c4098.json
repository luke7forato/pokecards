{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/lucas/Documents/pokemoncards/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react'; //css\n\nimport './App.css'; //components\n\nimport Searchbar from './Components/Searchbar/Searchbar';\nimport CardTable from './Components/CardTable/CardTable';\n\nfunction App() {\n  _s();\n\n  const [pokemon, setPokemon] = useState([]);\n  const [pokemonSpecies, setPokemonSpecies] = useState([]);\n  const [idToShow, setIdToShow] = useState([]);\n  const [pokemonToShow, setPokemonToShow] = useState([]); //'water', 'bug', 'dark', 'fighting', 'ghost', 'steel', 'flying', 'electric', 'fairy'];\n  //const habitat = ['grassland', 'forest', 'waters edge', 'sea', 'cave', 'mountain', 'rough-terrain', 'urban', 'rare'];\n  //const color = ['red', 'blue', 'yellow', 'green', 'black', 'brown', 'purple', 'gray', 'white', 'pink'];\n\n  const [buttons, setButtons] = useState([{\n    filter: 'type',\n    name: 'poison',\n    active: false\n  }, {\n    filter: 'habitat',\n    name: 'grassland',\n    active: false\n  }, {\n    filter: 'color',\n    name: 'green',\n    active: false\n  }, {\n    filter: 'type',\n    name: 'grass',\n    active: false\n  }]);\n  const [types, setTypes] = useState([]);\n  const [colors, setColors] = useState([]);\n  const [habitats, setHabitats] = useState([]);\n  useEffect(() => {\n    updateTypes();\n    updateColors();\n    updateHabitats();\n    updateCards();\n  }, [buttons]); //set types\n\n  const updateTypes = () => {\n    let btns = [];\n    buttons.forEach(button => {\n      if (button.filter === 'type') {\n        btns.push(button);\n      }\n    });\n    setTypes(btns);\n  }; //set colors\n\n\n  const updateColors = () => {\n    let btns = [];\n    buttons.forEach(button => {\n      if (button.filter === 'color') {\n        btns.push(button);\n      }\n    });\n    setColors(btns);\n  }; //set habitat\n\n\n  const updateHabitats = () => {\n    let btns = [];\n    buttons.forEach(button => {\n      if (button.filter === 'habitat') {\n        btns.push(button);\n      }\n    });\n    setHabitats(btns);\n  };\n\n  const toggleButtons = btn => {\n    const copy = [...buttons];\n    const found = copy.findIndex(element => element.name === btn.id);\n    copy[found].active = !copy[found].active;\n    setButtons(copy);\n  }; //async function that fetches all pokemon\n\n\n  useEffect(() => {\n    for (let i = 1; i < 30; i++) {\n      fetch(`https://pokeapi.co/api/v2/pokemon/${i}/`).then(response => response.json()).then(jsonResponse => setPokemon(prev => [...prev, jsonResponse])).catch(error => console.log(error));\n    }\n  }, []); //async function that fetches all pokemon species\n\n  useEffect(() => {\n    for (let i = 1; i < 30; i++) {\n      fetch(`https://pokeapi.co/api/v2/pokemon-species/${i}/`).then(response => response.json()).then(jsonResponse => setPokemonSpecies(prev => [...prev, jsonResponse])).catch(error => console.log(error));\n    }\n  }, []);\n\n  const updateFilters = () => {\n    let filters = [];\n    buttons.forEach(button => {\n      if (button.active === true) {\n        filters.push(button);\n      }\n    });\n    return filters;\n  };\n\n  const updateCardsTypes = () => {\n    const filters = updateFilters();\n    let filteredPokemon = [];\n\n    for (let i = 0; i < filters.length; i++) {\n      for (let j = 1; j < pokemon.length; j++) {\n        for (let k = 0; k < pokemon[j].types.length; k++) {\n          if (pokemon[j].types[k].type.name === filters[i].name) {\n            filteredPokemon.push(pokemon[j].id);\n          }\n        }\n      }\n    }\n\n    return filteredPokemon;\n  };\n\n  const updateCardsHabitats = () => {\n    const filters = updateFilters();\n    let filteredPokemon = [];\n\n    for (let i = 0; i < filters.length; i++) {\n      for (let j = 1; j < pokemonSpecies.length; j++) {\n        if (pokemonSpecies[j].habitat.name === filters[i].name) {\n          filteredPokemon.push(pokemonSpecies[j].id);\n        }\n      }\n    }\n\n    return filteredPokemon;\n  };\n\n  const updateCardsColors = () => {\n    const filters = updateFilters();\n    let filteredPokemon = [];\n\n    for (let i = 0; i < filters.length; i++) {\n      for (let j = 1; j < pokemonSpecies.length; j++) {\n        if (pokemonSpecies[j].color.name === filters[i].name) {\n          filteredPokemon.push(pokemonSpecies[j].id);\n        }\n      }\n    }\n\n    return filteredPokemon;\n  };\n\n  const updateCards = () => {\n    const types = updateCardsTypes();\n    const colors = updateCardsColors();\n    const habitats = updateCardsHabitats();\n    let all = [...types, ...colors, ...habitats];\n    let unique = [...new Set(all)];\n    setIdToShow(unique);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Searchbar, {\n      toggleButtons: toggleButtons,\n      buttons: buttons,\n      colors: colors,\n      habitats: habitats,\n      types: types\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardTable, {\n      pokemonToShow: pokemonToShow\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 172,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"qTudWVjlzrCUtXADoH5Xsbat5/8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/lucas/Documents/pokemoncards/src/App.js"],"names":["React","useEffect","useState","Searchbar","CardTable","App","pokemon","setPokemon","pokemonSpecies","setPokemonSpecies","idToShow","setIdToShow","pokemonToShow","setPokemonToShow","buttons","setButtons","filter","name","active","types","setTypes","colors","setColors","habitats","setHabitats","updateTypes","updateColors","updateHabitats","updateCards","btns","forEach","button","push","toggleButtons","btn","copy","found","findIndex","element","id","i","fetch","then","response","json","jsonResponse","prev","catch","error","console","log","updateFilters","filters","updateCardsTypes","filteredPokemon","length","j","k","type","updateCardsHabitats","habitat","updateCardsColors","color","all","unique","Set"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\n//css\nimport './App.css'\n//components\nimport Searchbar from './Components/Searchbar/Searchbar';\nimport CardTable from './Components/CardTable/CardTable';\n\nfunction App() {\n\n  const [pokemon, setPokemon] = useState([]);\n  const [pokemonSpecies, setPokemonSpecies] = useState([]);\n  const [idToShow, setIdToShow] = useState([]);\n\n  const [pokemonToShow, setPokemonToShow] = useState([]);\n\n    //'water', 'bug', 'dark', 'fighting', 'ghost', 'steel', 'flying', 'electric', 'fairy'];\n    //const habitat = ['grassland', 'forest', 'waters edge', 'sea', 'cave', 'mountain', 'rough-terrain', 'urban', 'rare'];\n    //const color = ['red', 'blue', 'yellow', 'green', 'black', 'brown', 'purple', 'gray', 'white', 'pink'];\n  const [buttons, setButtons] = useState([{filter: 'type' , name: 'poison', active: false}, {filter: 'habitat' , name: 'grassland', active: false}, {filter: 'color' , name: 'green', active: false}, {filter: 'type' , name: 'grass', active: false}])\n  const [types, setTypes] = useState([]);\n  const [colors, setColors] = useState([]);\n  const [habitats, setHabitats] = useState([]);\n\n\n  useEffect(() => {\n    updateTypes();\n    updateColors();\n    updateHabitats();\n    updateCards();\n  }, [buttons]);\n\n  //set types\n  const updateTypes = () => {\n    let btns = [];\n    buttons.forEach(button => {\n      if(button.filter === 'type') {\n        btns.push(button)\n      }\n    })\n    setTypes(btns)\n  }\n\n //set colors\n  const updateColors =() => {\n    let btns = [];\n    buttons.forEach(button => {\n      if(button.filter === 'color') {\n        btns.push(button)\n      }\n    })\n    setColors(btns)\n  }\n\n //set habitat\n  const updateHabitats = () => {\n    let btns = [];\n    buttons.forEach(button => {\n      if(button.filter === 'habitat') {\n        btns.push(button)\n      }\n    })\n    setHabitats(btns)\n  }\n\n  const toggleButtons = (btn) => {\n    const copy = [...buttons];\n    const found = copy.findIndex(element => element.name === btn.id);\n    copy[found].active = !copy[found].active;\n    setButtons(copy);\n  };\n\n  //async function that fetches all pokemon\n  useEffect(() => {\n    for(let i = 1; i < 30; i++) {\n      fetch(`https://pokeapi.co/api/v2/pokemon/${i}/`\n      ).then((response) => response.json()\n      ).then((jsonResponse) => setPokemon((prev) => [...prev, jsonResponse])\n      ).catch((error) => console.log(error));\n    }\n  }, []);\n\n  //async function that fetches all pokemon species\n  useEffect(() => {\n    for(let i = 1; i < 30; i++) {\n      fetch(`https://pokeapi.co/api/v2/pokemon-species/${i}/`\n      ).then((response) => response.json()\n      ).then((jsonResponse) => setPokemonSpecies((prev) => [...prev, jsonResponse])\n      ).catch((error) => console.log(error));\n    }\n  }, []);\n\n\n\n\n  const updateFilters = () => {\n    let filters = [];\n    buttons.forEach(button => {\n      if(button.active === true) {\n        filters.push(button);\n      }\n    });\n    return filters;\n  }\n\n\n  const updateCardsTypes = () => {\n    const filters = updateFilters();\n    let filteredPokemon = [];\n    for(let i = 0; i < filters.length; i++) {\n      for(let j = 1; j < pokemon.length; j++) {\n        for(let k = 0; k < pokemon[j].types.length; k++) {\n          if(pokemon[j].types[k].type.name === filters[i].name) {\n            filteredPokemon.push(pokemon[j].id);\n          }\n        }\n\n      }\n    }\n    return filteredPokemon;\n  }\n\n\n\n  const updateCardsHabitats = () => {\n    const filters = updateFilters();\n    let filteredPokemon = [];\n    for(let i = 0; i < filters.length; i++) {\n      for(let j = 1; j < pokemonSpecies.length; j++) {\n        if(pokemonSpecies[j].habitat.name === filters[i].name) {\n          filteredPokemon.push(pokemonSpecies[j].id);\n        }\n\n      }\n    }\n    return filteredPokemon;\n  }\n\n\n\n\n  const updateCardsColors = () => {\n    const filters = updateFilters();\n    let filteredPokemon = [];\n    for(let i = 0; i < filters.length; i++) {\n      for(let j = 1; j < pokemonSpecies.length; j++) {\n        if(pokemonSpecies[j].color.name === filters[i].name) {\n          filteredPokemon.push(pokemonSpecies[j].id);\n        }\n\n      }\n    }\n    return filteredPokemon;\n  }\n\n\n\n\n  const updateCards = () => {\n    const types = updateCardsTypes();\n    const colors = updateCardsColors();\n    const habitats = updateCardsHabitats();\n    let all = [...types, ...colors, ...habitats];\n    let unique = [...new Set(all)];\n    setIdToShow(unique);\n  }\n\n\n\n\n\n  return (\n    <div  className=\"App\">\n      <Searchbar  toggleButtons={toggleButtons} buttons={buttons} colors={colors} habitats={habitats} types={types}/>\n      <CardTable pokemonToShow={pokemonToShow}/>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}